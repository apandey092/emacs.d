(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
;;(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))


(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)

(package-initialize) ;;
(put 'gnus-score-mode 'disabled nil)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
;; create new buffer
(setq ido-create-new-buffer 'always)

;; Temp disable back-up files
;; (setq make-backup-files nil)
;; (setq backup-directory-alist `(("." . "~/.saves")))
;; (setq backup-by-copying t)
;; (setq delete-old-versions t
;;       kept-new-versions 6
;;       kept-old-versions 2
;;       version-control t)

(require 'multiple-cursors)

(global-set-key (kbd "C-c C-d") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c C-a") 'mc/mark-all-like-this)


(setq tramp-default-method "ssh")

;;(push (substitute-in-file-name "path-to-ztree-directory") load-path)
;;(require 'ztree-dir)
;;; I prefer cmd key for meta
(setq mac-command-key-is-meta t)
					; mac-command-key-is-meta t
					; mac-command-modifier 'meta
					;      mac-option-modifier 'none)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("ea489f6710a3da0738e7dbdfc124df06a4e3ae82f191ce66c2af3e0a15e99b90" "4aee8551b53a43a883cb0b7f3255d6859d766b6c5e14bcb01bed572fcbef4328" "4cf3221feff536e2b3385209e9b9dc4c2e0818a69a1cdb4b522756bcdf4e00a4" default))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(require 'neotree)

(global-set-key [f8] 'neotree-toggle)

(diary)



;;LOSE UI
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))


(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.cql\\'" . sql-mode))
;;dictionary setting


(setenv "DICTIONARY" "en_GB")

(require 'auto-complete)
(auto-complete-mode)

;; yasnippet for templating
(require 'yasnippet)
(yas-global-mode 1)

;;JDEE for java development and debugging
;;(add-to-list 'load-path "~/.emacs.d/jdee-2.4.1/lisp")
;;(load "jde")
(setq multi-term-program "/bin/zsh")
;;(auto-save-mode 1)

;;disable auto-save :generate #
;; (setq backup-directory-alist
;;       `((".*" . ,temporary-file-directory)))
;; (setq auto-save-file-name-transforms
;;       `((".*" ,temporary-file-directory t)))

;; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
(custom-set-variables
  '(auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))
  '(backup-directory-alist '((".*" . "~/.emacs.d/backups/"))))

;; create the autosave dir if necessary, since emacs won't.
(make-directory "~/.emacs.d/autosaves/" t)

(add-to-list 'load-path "~/.emacs.d/orgmode-mediawiki")
(require 'ox-mediawiki)

(define-key global-map (kbd "<f9> r") 'remember)
(define-key global-map (kbd "<f9> R") 'remember-region)


(setq org-default-notes-file (concat org-directory "/orgnotes.org"))
(define-key global-map "\C-cc" 'org-capture)

;; use ffap for guessing files
(setq ido-use-filename-at-point 'guess)


;;DESKTOP MODE SAVE
(desktop-save-mode 1)


;; save a bunch of variables to the desktop file
;; for lists specify the len of the maximal saved data also
(setq desktop-globals-to-save
      (append '((extended-command-history . 30)
                (file-name-history        . 100)
                (grep-history             . 30)
                (compile-history          . 30)
                (minibuffer-history       . 50)
                (query-replace-history    . 60)
                (read-expression-history  . 60)
                (regexp-history           . 60)
                (regexp-search-ring       . 20)
                (search-ring              . 20)
                (shell-command-history    . 50)
                tags-file-name
                register-alist)))



;; auto-complete at startup
(require 'auto-complete)
(global-auto-complete-mode t)
